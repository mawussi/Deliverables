\begin{abstract}
We present different algorithms for computing a two-sided bidiagonal
factorization of a matrix,
which is required in many scientific applications
since a bidiagonal form is a stepping stone towards computation of
the singular value decomposition (SVD).
To this end, we consider a two-stage bidiagonalization approach.
During the first stage, the full matrix is
reduced to band bidiagonal form: this stage consists of
compute-intensive operations and represents the dominant cost
(in terms of total flops) to solution.
On the other hand, the second stage is
memory-bound and consists of reducing the band bidiagonal matrix to
bidiagonal form.
In the context of tile algorithms and the task-based
programming model, we focus on the first stage, and propose two
different implementations.
We present the advantages and drawbacks of
each of the two considered algorithms and discuss how a careful data
dependency analysis could help remove unnecessary task dependencies
and improve the performance.
Through experimental results on both a
20-core Intel Xeon multicore node and a 68-core Intel Xeon Phi KNL, we
demonstrate that our resulting task-based OpenMP prototype is
competitive with state-of-the-art implementations.
Finally, we discuss potential solutions
for the design of the second stage which is currently in progress.
\end{abstract}
