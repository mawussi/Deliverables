\section{Principles of tile algorithms}\label{sec:tile}
In order to use modern many/multi-core shared memory architectures at
full efficiency many LAPACK library algorithms initially powered by
block algorithms have been redesigned into tile algorithms. This led
to a new generation of linear algebra library such as
PLASMA~\cite{DBLP:journals/corr/abs-0709-1272} and FLAME~\cite{FLAWN3}
Instead of operating on block-columns as the case in LAPACK, tile
algorithms operates at a finer granularity by dividing the whole
matrix into small square tiles which are more likely to fit into the
L2 cache. As illustrated in Figure~\ref{fig:SVD_initial}, the original
matrix has been converted into a 5-by-5 tile matrix.  One of the
advantages of working at tile granularity is that it provides more
room for parallelism with many tasks to keep each core of modern
massive parallel architectures working at full efficiency.  Another
advantage of tile algorithms is that it removes the fork-join overhead
proper to LAPACK block algorithms~\cite{haidar2012analysis}. In fact,
the order of execution of the tasks in tile algorithms are commonly
represented in form of a Directed Acyclic Graph (DAG) where each node
represents a task, while the edges represent the execution
dependencies between the tasks. These tasks are then scheduled
thanks to a runtime system which check the dependencies and
takes care of each task execution.

  \begin{figure}[h!]
    %%%% 1
    \captionsetup[subfigure]{justification=justified,singlelinecheck=false}
  \begin{subfigure}[t]{0.160 \textwidth}
    \includegraphics[width=0.7cm, height=3.5cm]{fig/SVD_rect_panel_1}
    \caption{\label{fig:geqrt_1}QR}
  \end{subfigure}
  \hfill
  %%%% 2
  \begin{subfigure}[t]{0.160 \textwidth}
    \includegraphics[width=0.7cm, height=3.5cm]{fig/SVD_rect_panel_3}
    \caption{\label{fig:tsqrt_2}TSQRT}
  \end{subfigure}
  \hfill
  %%%% 3
    \begin{subfigure}[t]{0.160 \textwidth}
    \includegraphics[width=0.7cm, height=3.5cm]{fig/SVD_rect_panel_5}
    \caption{\label{fig:tsqrt_3} TSQRT}
    \end{subfigure}
    \hfill
    %%%% 4
    \begin{subfigure}[t]{0.160 \textwidth}
      \includegraphics[width=0.7cm, height=3.5cm]{fig/SVD_rect_panel_6}
      \caption{\label{fig:tsqrt_4}TSQRT}
    \end{subfigure}
    \hfill
    %%%% 5
    \begin{subfigure}[t]{0.160 \textwidth}
      \includegraphics[width=0.7cm, height=3.5cm]{fig/SVD_rect_panel_7}
      \caption{\label{fig:tsqrt_5}TSQRT}
    \end{subfigure}
    \hfill
    %%%% 6
    \begin{subfigure}[t]{0.160 \textwidth}
      \includegraphics[width=0.7cm, height=3.5cm]{fig/SVD_rect_panel_8}
      \caption{\label{fig:tsqrt_output}End}
    \end{subfigure}
    \caption{Panel factorization using the triangle on top of square QR factorization kernel (TSQRT)  
    \label{fig:rect_panel}}
\end{figure}

For the sake of illustration we show in Figure~\ref{fig:rect_panel}
the tile algorithm variant of QR factorization of a panel
(block-column).  With respect to the example showed in
Figure~\ref{fig:two_stage}, the panel has been divided in 5 tiles.
This algorithm two tile kernels. One standard QR factorize kernel to
factorize the first tile (Figure~\ref{fig:geqrt_1}) then a specialized 
kernel to use the top triangular matrix from the first QR factorization
to zero the square tiles below (Figures~\ref{fig:tsqrt_2}-\ref{fig:tsqrt_5}).
This kernel is denoted TSQRT and stands
for Triangle on top of Square Tile QR factorization. 
In the sequel we will introduce more specialized kernels
designed to operate on tiles. 
